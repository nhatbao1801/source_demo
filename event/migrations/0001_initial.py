# Generated by Django 3.1.2 on 2022-03-14 05:00

import cloudinary.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'người dùng',
                'verbose_name_plural': 'User - Người dùng',
                'db_table': 'hinnox_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='JavaScript, Python, Java, Ruby etc.', max_length=55, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Area',
                'verbose_name_plural': 'Areas',
                'db_table': 'hinnox_areas',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='City name', max_length=100, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'db_table': 'hinnox_cities',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Tên của sự kiện', max_length=1000)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Ngày tạo')),
                ('picture', cloudinary.models.CloudinaryField(blank=True, help_text='File ảnh', max_length=255, null=True, verbose_name='image')),
                ('picture_url', models.URLField(blank=True, help_text='URL ảnh đại diện của sự kiện', null=True)),
                ('url', models.CharField(blank=True, help_text='Địa chỉ tùy chỉnh đến trang của sự kiện https://hinnox.com/event-url', max_length=300, null=True)),
                ('hash_tag', models.CharField(blank=True, help_text='Tìm kiếm sự kiện trên các mạng xã hội khác', max_length=150, null=True)),
                ('street_address', models.CharField(blank=True, help_text='Địa chỉ chi tiết của sự kiện', max_length=512, null=True)),
                ('venue', models.CharField(blank=True, help_text='Tên địa điểm tổ chức sự kiện', max_length=300, null=True)),
                ('tagline', models.CharField(blank=True, help_text='Tag giúp tìm kiếm event trong hinnox', max_length=100, null=True)),
                ('description', models.CharField(blank=True, help_text='Mô tả về sự kiện', max_length=2500, null=True)),
                ('from_date', models.DateTimeField(blank=True, help_text='Ngày bắt đầu', null=True)),
                ('to_date', models.DateTimeField(blank=True, help_text='Ngày kết thúc', null=True)),
                ('schedule', models.TextField(blank=True, help_text='Kế hoạch tổ chức của sự kiện', null=True)),
                ('last_modified', models.DateTimeField(blank=True, help_text='Thời gian sửa đổi lần cuối', null=True)),
                ('areas', models.ManyToManyField(blank=True, db_table='hinnox_events_areas', to='event.Area')),
                ('city', models.ForeignKey(blank=True, help_text='Thành phố noi tổ chức sự kiện', null=True, on_delete=django.db.models.deletion.CASCADE, to='event.city')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hinnox_events',
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Tên hạng mục', max_length=55, verbose_name='Tên')),
            ],
            options={
                'verbose_name': 'hạng mục nhà tài trợ',
                'verbose_name_plural': 'Event category - Hạng mục nhà tài trợ',
                'db_table': 'hinnox_event_categories',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Loại hình sự kiện Meeting, Hackathon, Workshop...', max_length=50)),
            ],
            options={
                'db_table': 'hinnox_event_types',
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', cloudinary.models.CloudinaryField(blank=True, help_text='logo nhà tài trợ', max_length=255, null=True, verbose_name='image')),
                ('name', models.CharField(help_text='Tên nhà tài trợ', max_length=255)),
                ('is_verified', models.BooleanField(default=True, help_text='Nhà tài trợ đã được xác nhận hay chưa')),
            ],
            options={
                'verbose_name': 'Sponsor',
                'verbose_name_plural': 'Sponsors',
                'db_table': 'hinnox_sponsors',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Dành cho đối tượng nào Participant, Developer, Designer, Tự thêm', max_length=50)),
                ('description', models.CharField(blank=True, help_text='Mô tả sự kiện', max_length=300, null=True)),
                ('sale_from', models.DateTimeField(help_text='Ngày mở bán')),
                ('sale_to', models.DateTimeField(help_text='Ngày kết thúc')),
                ('max_quantity', models.PositiveSmallIntegerField(help_text='Số lượng tối đa có thể tham dự')),
                ('sold', models.PositiveSmallIntegerField(help_text='Số lượng đã bán')),
                ('price', models.DecimalField(decimal_places=3, help_text='Giá của vé', max_digits=20)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.event')),
            ],
            options={
                'db_table': 'hinnox_tickets',
            },
        ),
        migrations.CreateModel(
            name='SponsorEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_category_name', models.CharField(help_text='Hạng mục nhà tài trợ tùy chỉnh', max_length=55)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.event')),
                ('event_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event.eventcategory')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.sponsor')),
            ],
            options={
                'verbose_name': 'event sponsor',
                'verbose_name_plural': 'Event sponsors',
                'db_table': 'hinnox_sponsors_events',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('vid', 'video'), ('img', 'image')], help_text='Loại media muốn lưu', max_length=7)),
                ('url', models.CharField(blank=True, help_text='Nếu chọn loại media là video', max_length=300, null=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, help_text='File ảnh', max_length=255, null=True, verbose_name='image')),
                ('description', models.CharField(blank=True, help_text='Mô tả file', max_length=255, null=True)),
                ('set_as_cover', models.BooleanField(default=False, help_text='Chọn ảnh làm ảnh bìa hay không?')),
                ('ref', models.CharField(blank=True, help_text='Ref: trường hợp không có thuộc id nào thì truyền định danh: vd: application_form', max_length=255, null=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event.event')),
            ],
            options={
                'db_table': 'hinnox_medias',
            },
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hinnox_event_participants',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='type',
            field=models.ForeignKey(blank=True, help_text='Loại sự kiện', null=True, on_delete=django.db.models.deletion.CASCADE, to='event.eventtype'),
        ),
        migrations.AddField(
            model_name='event',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='users_interested_in',
            field=models.ManyToManyField(blank=True, help_text='User quan tâm tới sự kiện', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='area',
            name='types',
            field=models.ManyToManyField(db_table='hinnox_areas_types', help_text='types', to='event.EventType', verbose_name='type'),
        ),
    ]
